{"ast":null,"code":"import _asyncToGenerator from \"C:/ProyectosC/ChatApplicationYT/ChatApplicationYT/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport * as signalR from '@microsoft/signalr';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ChatService {\n  constructor() {\n    this.connection = new signalR.HubConnectionBuilder().withUrl(\"http://localhost:5082/chat\").configureLogging(signalR.LogLevel.Information).build();\n    this.messages$ = new BehaviorSubject([]);\n    this.connectedUsers$ = new BehaviorSubject([]);\n    this.messages = [];\n    this.users = [];\n    this.start();\n    this.connection.on(\"ReceiveMessage\", (user, message, messageTime) => {\n      this.messages = [...this.messages, {\n        user,\n        message,\n        messageTime\n      }];\n      this.messages$.next(this.messages);\n    });\n    this.connection.on(\"ConnectedUser\", users => {\n      this.connectedUsers$.next(users);\n    });\n  }\n  //start connection\n  start() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.connection.start();\n        console.log(\"Connection is established!\");\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }\n  //Join Room\n  joinRoom(user, room) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.connection.invoke(\"JoinRoom\", {\n        user,\n        room\n      });\n    })();\n  }\n  // Send Messages\n  sendMessage(message) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.connection.invoke(\"SendMessage\", message);\n    })();\n  }\n  //leave\n  leaveChat() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.connection.stop();\n    })();\n  }\n}\n_class = ChatService;\n_class.ɵfac = function ChatService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["signalR","BehaviorSubject","ChatService","constructor","connection","HubConnectionBuilder","withUrl","configureLogging","LogLevel","Information","build","messages$","connectedUsers$","messages","users","start","on","user","message","messageTime","next","_this","_asyncToGenerator","console","log","error","joinRoom","room","_this2","invoke","sendMessage","_this3","leaveChat","_this4","stop","factory","ɵfac","providedIn"],"sources":["C:\\ProyectosC\\ChatApplicationYT\\ChatApplicationYT\\ClientApp\\src\\app\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n\r\n  public connection: signalR.HubConnection = new signalR.HubConnectionBuilder()\r\n  .withUrl(\"http://localhost:5082/chat\")\r\n  .configureLogging(signalR.LogLevel.Information)\r\n  .build();\r\n\r\n  public messages$ = new BehaviorSubject<any>([]);\r\n  public connectedUsers$ = new BehaviorSubject<string[]>([]);\r\n  public messages: any[] = [];\r\n  public users: string[] = [];\r\n\r\n  constructor() {\r\n    this.start();\r\n    this.connection.on(\"ReceiveMessage\", (user: string, message: string, messageTime: string)=>{\r\n      this.messages = [...this.messages, {user, message, messageTime} ];\r\n      this.messages$.next(this.messages);\r\n    });\r\n\r\n    this.connection.on(\"ConnectedUser\", (users: any)=>{\r\n      this.connectedUsers$.next(users);\r\n    });\r\n   }\r\n\r\n  //start connection\r\n  public async start(){\r\n    try {\r\n      await this.connection.start();\r\n      console.log(\"Connection is established!\")\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  //Join Room\r\n  public async joinRoom(user: string, room: string){\r\n    return this.connection.invoke(\"JoinRoom\", {user, room})\r\n  }\r\n\r\n\r\n  // Send Messages\r\n  public async sendMessage(message: string){\r\n    return this.connection.invoke(\"SendMessage\", message)\r\n  }\r\n\r\n  //leave\r\n  public async leaveChat(){\r\n    return this.connection.stop();\r\n  }\r\n\r\n}\r\n"],"mappings":";;AACA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;AAC7C,SAASC,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,WAAW;EAYtBC,YAAA;IAVO,KAAAC,UAAU,GAA0B,IAAIJ,OAAO,CAACK,oBAAoB,EAAE,CAC5EC,OAAO,CAAC,4BAA4B,CAAC,CACrCC,gBAAgB,CAACP,OAAO,CAACQ,QAAQ,CAACC,WAAW,CAAC,CAC9CC,KAAK,EAAE;IAED,KAAAC,SAAS,GAAG,IAAIV,eAAe,CAAM,EAAE,CAAC;IACxC,KAAAW,eAAe,GAAG,IAAIX,eAAe,CAAW,EAAE,CAAC;IACnD,KAAAY,QAAQ,GAAU,EAAE;IACpB,KAAAC,KAAK,GAAa,EAAE;IAGzB,IAAI,CAACC,KAAK,EAAE;IACZ,IAAI,CAACX,UAAU,CAACY,EAAE,CAAC,gBAAgB,EAAE,CAACC,IAAY,EAAEC,OAAe,EAAEC,WAAmB,KAAG;MACzF,IAAI,CAACN,QAAQ,GAAG,CAAC,GAAG,IAAI,CAACA,QAAQ,EAAE;QAACI,IAAI;QAAEC,OAAO;QAAEC;MAAW,CAAC,CAAE;MACjE,IAAI,CAACR,SAAS,CAACS,IAAI,CAAC,IAAI,CAACP,QAAQ,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAACT,UAAU,CAACY,EAAE,CAAC,eAAe,EAAGF,KAAU,IAAG;MAChD,IAAI,CAACF,eAAe,CAACQ,IAAI,CAACN,KAAK,CAAC;IAClC,CAAC,CAAC;EACH;EAED;EACaC,KAAKA,CAAA;IAAA,IAAAM,KAAA;IAAA,OAAAC,iBAAA;MAChB,IAAI;QACF,MAAMD,KAAI,CAACjB,UAAU,CAACW,KAAK,EAAE;QAC7BQ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;OAC1C,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;;IACnB;EACH;EAEA;EACaC,QAAQA,CAACT,IAAY,EAAEU,IAAY;IAAA,IAAAC,MAAA;IAAA,OAAAN,iBAAA;MAC9C,OAAOM,MAAI,CAACxB,UAAU,CAACyB,MAAM,CAAC,UAAU,EAAE;QAACZ,IAAI;QAAEU;MAAI,CAAC,CAAC;IAAA;EACzD;EAGA;EACaG,WAAWA,CAACZ,OAAe;IAAA,IAAAa,MAAA;IAAA,OAAAT,iBAAA;MACtC,OAAOS,MAAI,CAAC3B,UAAU,CAACyB,MAAM,CAAC,aAAa,EAAEX,OAAO,CAAC;IAAA;EACvD;EAEA;EACac,SAASA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAX,iBAAA;MACpB,OAAOW,MAAI,CAAC7B,UAAU,CAAC8B,IAAI,EAAE;IAAC;EAChC;;SAhDWhC,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAiC,OAAA,EAAXjC,MAAW,CAAAkC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}